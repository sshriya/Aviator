#!/usr/bin/env python
#launch and try to find tags.
#Publish 2 messages for notifying whether tag found and also the position if the tag

##TAG pose: front +ve y, back -ve y
#right -ve x, left +ve x
import rospy
import roslib; roslib.load_manifest('aBot')
from std_msgs.msg import Bool

from apriltags_ros.msg import (
    AprilTagDetectionArray,
    AprilTagDetection
)
from geometry_msgs.msg import (
    PoseArray,
    PoseStamped,
    Pose,
    Point,
    Quaternion,
    Twist,
    Vector3
)

from sensor_msgs.msg import JointState
import numpy as np

class tagDetect:
	def __init__( self ):
		#define tag which finds if tag is detected or not
		self.tag = 0
		#self.position = np.zeros((3,1))
		self.x = self.y = self.z = 0

		#Publish tag found and tag position
		self.pub_tag_pose = rospy.Publisher('/aBot/tagPose', Vector3)
		self.pub_tag_flag = rospy.Publisher('/aBot/tagFlag', Bool)
		self.msg1 = Vector3()
		self.msg2 = Bool()

		#Subscribe to ar tag detection node
    		rospy.Subscriber("/tag_detections",AprilTagDetectionArray, self.callback)

		print('Initilization completed!')

		#Variable used to test 
		self.fly = 1



	def callback(self, data):
		#april tag topic subscriber callback
    		msg = data.detections
    		i = 0

    		if msg:

			rospy.loginfo('Tag detected')
			self.tag = 1
    			self.x = msg[i].pose.pose.position.x
   			self.y = msg[i].pose.pose.position.y
   			self.z = msg[i].pose.pose.position.z			

    			rospy.loginfo("Point Position: [ %f, %f, %f ]"%(self.x, self.y, self.z))
			rospy.loginfo(self.tag)

    		else:
			rospy.loginfo('No tag detected!!')
			self.tag = 0
			self.position = None 
			rospy.loginfo(self.tag)


def detect():
	    	
	rospy.init_node('tagdetect', anonymous=True)

	#Switch to bottom camera
	#rosservice call --wait /ardrone/togglecam

	r = rospy.Rate(5)
	obj = tagDetect()


	while not rospy.is_shutdown():
		
		obj.msg1.x = obj.x
		obj.msg1.y = obj.y
		obj.msg1.z = obj.z
		obj.msg2.data = obj.tag
        	obj.pub_tag_pose.publish(obj.msg1)
		obj.pub_tag_flag.publish(obj.msg2)
		r.sleep()
		


if __name__ == '__main__':
 	try:
         	detect()
        except rospy.ROSInterruptException:
        	pass

